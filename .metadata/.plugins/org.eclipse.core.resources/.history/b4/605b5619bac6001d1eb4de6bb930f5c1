import static org.testng.Assert.ARRAY_MISMATCH_TEMPLATE;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Repetitions {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		int[] a = {2,3,4,4,5,7};
		List<int[]> q = Arrays.asList(a);		
		HashSet<Integer> t = new HashSet();
		q.stream().flatMapToInt(s->IntStream.of(s)).filter(s->!t.add(s)).forEach(System.out::println);
		System.out.println(t);
		List<String> companies = Arrays.asList("Meta","Meta","Apple");	 
		 
//        // 1.1 add string elements to List
//        companies.add("Meta");
//        companies.add("Apple");
//        companies.add("Amazon");
//        companies.add("Netflix");
//        companies.add("Meta"); // duplicate
//        companies.add("Google");
//        companies.add("Apple"); // duplicate
// 
// 
        // 1.2 print original List to console
        System.out.println("1. Original List with duplicates : \n");
        companies.forEach(System.out::println);
 
 
        // 2. get duplicate count using Map
        Map<String, Integer> duplicateCountMap = companies
                .stream()
                .collect(
                        Collectors.toMap(Function.identity(), company -> 1, Integer::sum)
                        );
 
 
        // 2.1 print Map for duplicate count
        System.out.println("\n2. Map with Key and its duplicate count : \n");
        duplicateCountMap.forEach(
                (key, value) -> System.out.println("Key : " + key + "\t Count : " + value)
                );
 
		
		
		
		
		
		
		

	}

}
